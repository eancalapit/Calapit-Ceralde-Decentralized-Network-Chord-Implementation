#include <SHA1.h>
#include <Wire.h>
#include <SPI.h>
#include <LoRa.h>
#include <SD.h>
#include <RTClib.h>
#include <Adafruit_BME280.h>

#define LORA_FREQ 923E6
#define NODE_ID 0 // Define the unique node ID here
#define NUM_NODES 4 // Total number of nodes
#define BME280_ADDRESS 0x76

Adafruit_BME280 bme;
RTC_DS3231 rtc;

struct FingerTableEntry {
  int start;
  int nodeID;
};

FingerTableEntry fingerTable[8]; // Adjust as per identifier space
unsigned long lastDataSendTime = 0;
unsigned long lastFingerTableUpdateTime = 0;
unsigned long lastSensorReadTime = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  // Initialize LoRa
  if (!LoRa.begin(LORA_FREQ)) {
    Serial.println("LoRa initialization failed!");
    while (1);
  }
  Serial.println("LoRa Initialized");

  // Initialize SD card
  if (!SD.begin()) {
    Serial.println("SD Card initialization failed!");
    while (1);
  }
  Serial.println("SD Card initialized");

  // Initialize RTC
  if (!rtc.begin()) {
    Serial.println("RTC initialization failed!");
    while (1);
  }
  if (rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  // Initialize BME280 sensor
  if (!bme.begin(BME280_ADDRESS)) {
    Serial.println("BME280 sensor initialization failed!");
    while (1);
  }
  Serial.println("BME280 Initialized");

  // Generate Node ID and setup finger table
  setupFingerTable();
}

void loop() {
  // Check if it’s time to read sensor
  if (millis() - lastSensorReadTime >= 1800000) { // 30 mins
    readSensorData();
    lastSensorReadTime = millis();
  }

  // Check if it’s time to update the finger table
  if (millis() - lastFingerTableUpdateTime >= 3600000) { // 1 hour
    updateFingerTable();
    lastFingerTableUpdateTime = millis();
  }

  // Check if it’s time to send data
  if (millis() - lastDataSendTime >= getTransmitInterval()) {
    sendData();
    lastDataSendTime = millis();
  }
}

// Function to determine transmit interval
unsigned long getTransmitInterval() {
  // Adjust transmit interval based on payload size
  // Example: 1-2 hours based on payload size; adjust as needed
  return 3600000; // Default 1 hour (adjust based on logic)
}

// Read data from BME280
void readSensorData() {
  float temperature = bme.readTemperature();
  float humidity = bme.readHumidity();
  
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from BME280 sensor!");
    return;
  }
  
  // Log data to SD card
  File dataFile = SD.open("BME280_data.txt", FILE_APPEND);
  if (dataFile) {
    dataFile.print(rtc.now().timestamp());
    dataFile.print(", ");
    dataFile.print(NODE_ID);
    dataFile.print(", ");
    dataFile.print("Temperature: ");
    dataFile.print(temperature);
    dataFile.print(", Humidity: ");
    dataFile.println(humidity);
    dataFile.close();
  } else {
    Serial.println("Error opening BME280_data.txt");
  }
}

// Send data to other nodes
void sendData() {
  String message = createDataPacket();
  
  // Send message via LoRa
  LoRa.beginPacket();
  LoRa.print(message);
  LoRa.endPacket();
  
  // Measure and log RSSI, SNR, and packet loss rate
  logSignalQuality();
}

// Create data packet with nodeID, timestamp, and sensor data
String createDataPacket() {
  String packet = "Node: ";
  packet += NODE_ID;
  packet += ", Time: ";
  packet += rtc.now().timestamp();
  packet += ", Temperature: ";
  packet += bme.readTemperature();
  packet += ", Humidity: ";
  packet += bme.readHumidity();
  packet += ", GPS: ";
  packet += "LatLonCoordinates"; // Replace with actual GPS data if available
  return packet;
}

// Log RSSI, SNR, and PLR
void logSignalQuality() {
  int rssi = LoRa.packetRssi();
  float snr = LoRa.packetSnr();
  
  File logFile = SD.open("SignalLog.txt", FILE_APPEND);
  if (logFile) {
    logFile.print("Timestamp: ");
    logFile.print(rtc.now().timestamp());
    logFile.print(", RSSI: ");
    logFile.print(rssi);
    logFile.print(", SNR: ");
    logFile.print(snr);
    logFile.print(", Node ID: ");
    logFile.println(NODE_ID);
    logFile.close();
  } else {
    Serial.println("Error opening SignalLog.txt");
  }
}

// Setup finger table for this node
void setupFingerTable() {
  for (int i = 0; i < 8; i++) { // Adjust based on numBits
    fingerTable[i].start = (NODE_ID + (1 << i)) % NUM_NODES;
    fingerTable[i].nodeID = findSuccessor(fingerTable[i].start);
  }
}

// Update the finger table
void updateFingerTable() {
  for (int i = 0; i < 8; i++) {
    int successorID = findSuccessor(fingerTable[i].start);
    fingerTable[i].nodeID = successorID;
  }
  logFingerTable();
}

// Find successor of a given key
int findSuccessor(int key) {
  if (key == NODE_ID) return NODE_ID;
  return (NODE_ID + 1) % NUM_NODES; // Simplified for demonstration
}

// Log updated finger table with GPS data
void logFingerTable() {
  File fingerTableFile = SD.open("FingerTable.txt", FILE_APPEND);
  if (fingerTableFile) {
    fingerTableFile.print("Timestamp: ");
    fingerTableFile.print(rtc.now().timestamp());
    fingerTableFile.print(", Node ID: ");
    fingerTableFile.print(NODE_ID);
    fingerTableFile.print(", GPS: ");
    fingerTableFile.println("LatLonCoordinates"); // Replace with actual GPS data
    
    for (int i = 0; i < 8; i++) {
      fingerTableFile.print("Entry ");
      fingerTableFile.print(i);
      fingerTableFile.print(": start=");
      fingerTableFile.print(fingerTable[i].start);
      fingerTableFile.print(", nodeID=");
      fingerTableFile.println(fingerTable[i].nodeID);
    }
    fingerTableFile.close();
  } else {
    Serial.println("Error opening FingerTable.txt");
  }
}
